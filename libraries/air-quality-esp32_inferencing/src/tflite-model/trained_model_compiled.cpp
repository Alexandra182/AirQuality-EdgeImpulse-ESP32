/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 27.12.2021 21:26:22

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 352;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[14];
TfLiteEvalTensor tflEvalTensors[14];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[5];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,100 } };
const TfArray<1, float> quant0_scale = { 1, { 8.6313724517822266, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[10] = { 0, 0, 0, -1, 0, -1, 1, 0, 0, -1, };
const TfArray<1, int> tensor_dimension1 = { 1, { 10 } };
const TfArray<1, float> quant1_scale = { 1, { 0.016472447663545609, } };
const TfArray<1, int> quant1_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant1 = { (TfLiteFloatArray*)&quant1_scale, (TfLiteIntArray*)&quant1_zero, 0 };
const ALIGN(16) int32_t tensor_data2[20] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension2 = { 1, { 20 } };
const TfArray<1, float> quant2_scale = { 1, { 0.047867089509963989, } };
const TfArray<1, int> quant2_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int32_t tensor_data3[30] = { 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension3 = { 1, { 30 } };
const TfArray<1, float> quant3_scale = { 1, { 0.020421097055077553, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(8) int32_t tensor_data4[2] = { 0, 0, };
const TfArray<1, int> tensor_dimension4 = { 1, { 2 } };
const TfArray<1, float> quant4_scale = { 1, { 0.018191482871770859, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[10*100] = { 
  -90, -97, -84, -100, -73, -115, 15, -91, -20, 114, 10, -41, -102, 39, -88, -4, -97, 17, 18, 82, 109, 9, -60, 103, -82, 23, 106, 102, 50, -14, 118, -89, 110, -76, -39, 74, 82, -38, -78, -13, 104, -66, -109, 6, 113, 76, -88, -109, -70, -53, -71, 39, -110, -88, 49, 68, -47, 42, -42, -100, -76, 116, -107, -21, 23, -112, 106, -2, 36, 106, -50, 45, -63, -43, 81, 15, 34, -78, -12, -12, 82, -49, 118, 6, 79, 97, 63, 105, -99, 40, 36, 78, -27, 23, 57, 73, -55, -50, 20, -113, 
  16, 100, 27, 66, 1, -6, -46, -22, 25, 12, 113, 118, 77, 30, 99, 84, -98, 93, 79, 112, 63, -27, -58, 99, -26, 15, -103, -82, -69, -73, -49, 53, -45, 16, -101, 70, 83, 93, 54, 88, -9, 60, -66, -48, -96, -5, -69, 28, 38, 84, -69, -85, 30, -26, 57, 96, -65, -77, 6, 73, 96, -106, 110, 47, -117, -80, -21, -45, -110, 87, 105, -95, -39, 97, 66, 59, 84, 97, -59, -52, -62, -51, 21, -36, 24, -120, 4, -109, -100, -104, -112, -14, 31, -121, -6, -1, -22, -6, -66, 18, 
  -1, 46, -119, 82, -95, 21, 51, -69, 0, 93, 27, -39, -115, 32, -29, -53, -76, -17, 12, 112, -41, -9, -30, -59, -89, -87, -26, 100, 64, 106, -101, -117, -83, 61, -29, -7, 100, -116, -116, -26, 81, -113, -17, -24, -61, 108, 24, -20, -54, -101, 101, -14, 13, -89, -62, 36, -19, 95, -73, -51, -79, 80, 90, -40, -106, -39, 48, 101, -81, -104, 39, -67, 28, -64, -17, -13, -59, -91, -76, 111, 98, -28, -22, 26, -5, 21, -10, 92, -29, -11, 13, -52, 84, 71, -31, -51, 121, -19, -95, 50, 
  -124, 8, -38, 24, -101, -40, 45, 76, 27, 10, 30, -35, -90, 54, 13, -29, 13, 32, 98, 85, -5, 112, -111, 100, 14, 53, 49, -55, 5, 0, -65, 20, -38, -76, -31, -68, 109, 28, 66, 93, -126, -123, -82, -50, 116, 45, -15, -53, -22, -125, 106, 91, 2, 61, -45, 16, 87, 100, 17, -59, -5, -125, 84, 117, 3, 30, -104, 53, -33, 79, 85, 53, 24, 102, -29, -76, -95, 63, 0, -117, 2, -43, -27, -13, -34, 75, 61, -40, -96, -75, -81, 5, 84, -72, -96, -14, 63, -8, 69, 108, 
  1, -72, 68, -120, -73, 120, 76, -58, 38, 57, 108, -41, -93, 62, -47, 75, 23, 12, 37, -45, 40, -102, 4, -21, -8, -99, -25, -32, -103, 12, -5, -19, -59, -65, -54, -55, 28, -51, 22, -71, 20, 26, -49, 50, -47, -70, 27, 44, -13, 69, -55, 5, 105, -90, 49, -17, 111, -50, -1, 8, 8, 19, -64, -3, -60, 87, 67, 79, -62, 97, -46, -117, 69, 30, 62, 11, -89, -88, -62, -41, 51, 0, -99, -96, -79, 84, -32, -108, -113, -45, -6, -1, 100, 76, 91, -117, 64, 85, 39, 11, 
  56, -79, -73, 111, -28, -42, -25, 37, -7, -34, 40, 100, 25, -78, 36, -65, -7, -22, -106, 93, -64, -76, -79, 51, 106, -53, -62, -39, 84, 115, 17, -97, -67, -15, 38, 78, 77, 70, 98, 78, -64, 24, -118, -58, -28, 25, -44, -102, -87, -60, 51, -40, 16, 68, -53, 39, 61, 6, 35, 6, 50, -117, 110, -104, 1, -111, 104, 66, -40, 73, 71, -44, -17, -36, 28, 71, 113, -10, -70, 85, -9, 97, 26, -75, 99, 91, 61, -19, -40, -53, 71, 66, -117, -117, 69, 109, -24, -48, -16, 76, 
  -85, -85, 115, 109, -9, 78, -38, 26, -41, 1, 41, 5, 41, -7, -22, -52, -51, -9, 71, 43, -95, 10, -86, -92, -115, -63, -80, -103, 111, -73, 35, 63, -19, 90, 63, 64, 38, -95, -37, -9, 28, -51, -9, -103, 117, -49, -86, 97, 36, 81, 8, 52, -54, -20, 26, 20, 36, 126, -27, 118, 59, 14, -30, -16, -70, -5, -4, 82, -38, 36, -46, 39, 33, -5, 89, -34, 17, -90, -42, 54, 101, 38, 10, 124, -100, -63, -59, -84, -12, 59, 2, 43, 94, 67, 109, 91, 70, 121, 60, 37, 
  -40, -54, 118, 7, -82, -115, -28, -104, -100, 107, 112, -51, 18, 20, -112, 86, 97, -70, -94, 10, 76, 11, -65, 52, -87, 25, -53, -37, -67, -19, -13, -35, -2, 5, -95, -19, 7, -64, -34, 96, -38, -110, -96, -34, -116, 68, -24, -98, -19, 107, -105, -15, 84, -85, 37, 118, 44, 71, 84, 63, -107, 71, 101, 22, -107, 22, -62, 28, 13, -108, 38, -112, -119, 109, 27, 21, 52, -99, 41, 22, 14, -94, -108, 77, 76, -92, -80, 93, -80, 115, 91, 110, 53, 75, 95, 105, 26, 13, 3, -87, 
  34, -85, 45, -29, 41, 94, -119, 102, 72, 69, 52, 42, -42, -6, -28, -86, 47, -36, -99, -34, -123, -106, 111, -85, 5, 86, -51, -16, -126, -56, -78, 81, 18, -51, -24, -24, 84, -104, -4, -24, -18, 72, -38, -109, -26, -40, -68, 115, -55, -81, 104, -105, -107, 87, 24, -36, 92, 20, -5, -11, -46, 64, 41, 43, -56, 95, 45, 8, 80, 48, 34, 74, -23, 48, 10, -19, -107, 24, 26, 70, 57, -46, -103, -123, -89, 31, 77, -52, -38, 111, 3, 90, 91, -95, 55, 51, -88, 60, 99, 6, 
  -11, -40, 18, 50, 6, 78, 54, 52, -111, 20, -11, -9, -15, -4, -51, -109, 56, 102, -27, 104, -1, -34, -44, 87, -63, -13, -10, -41, 4, 95, -57, 34, 27, 23, 102, -118, 93, 29, -103, -23, 71, -42, -82, 63, -14, 100, 96, -111, 87, 77, -95, 108, -46, -7, -81, 107, 100, -113, 64, -125, -99, -120, 31, -91, -9, 117, -95, 58, -24, 34, 98, 11, -19, 91, 84, -62, -11, 59, 82, -33, -91, -99, -57, -55, 57, 107, 64, 41, 29, -74, -100, 13, 75, -22, -18, 81, -44, -59, 80, -127, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 10,100 } };
const TfArray<1, float> quant5_scale = { 1, { 0.0019084389787167311, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int8_t tensor_data6[20*10] = { 
  -79, 33, 104, -32, -104, -36, 114, -35, -103, -34, 
  -81, -63, 30, 83, -45, 17, -33, -95, -52, 57, 
  -97, 30, 79, 49, 98, -75, 37, 39, -31, -112, 
  -81, -76, -18, 76, 108, 93, -1, -29, 25, 30, 
  18, -66, -123, -42, -73, 8, -105, -19, 24, 122, 
  75, -98, -85, 4, 117, -127, -95, -62, -106, -106, 
  98, 14, 77, 15, 52, -60, -124, -8, 49, 45, 
  -67, -69, -25, -37, 107, 79, -22, -28, -72, -52, 
  -84, 10, 115, 73, -27, 54, 114, -20, -96, 2, 
  -34, 26, -90, 86, 94, -25, -105, -100, 120, -42, 
  -4, 22, -75, 23, -113, -68, 101, 1, 16, 16, 
  18, 48, 11, -54, -89, -96, -38, -107, 81, -106, 
  85, -62, -2, -55, 94, -56, -117, -40, 121, -36, 
  -23, -102, 57, 92, -91, 47, -81, 121, 34, -84, 
  8, -90, 106, -8, 121, -120, 45, 23, -110, 29, 
  100, 10, -24, -30, -116, 115, 54, 97, -11, 85, 
  -38, 97, -34, 59, 106, 74, -8, -11, -24, -55, 
  111, -117, -20, -97, 82, 116, -3, -47, 21, 57, 
  80, 58, -4, -116, -89, 93, 126, 59, 113, 7, 
  40, 95, 73, -70, -43, 35, -44, 27, 114, 113, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 20,10 } };
const TfArray<1, float> quant6_scale = { 1, { 0.0034799396526068449, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[30*20] = { 
  -36, -22, 1, -88, 28, 54, -112, 34, 34, 110, -72, -71, -78, -62, 96, -109, -13, -23, 120, 33, 
  73, -107, 39, -31, -23, -43, 95, -2, 73, -37, 67, 36, -109, -62, 20, 98, -97, -35, 18, -121, 
  -127, 16, 109, 115, -68, -29, -61, 7, -70, 84, 46, -102, -33, 73, 66, 81, -40, 98, -28, -7, 
  -108, 73, 39, -26, -114, -34, -111, -15, 80, 106, -115, 95, -25, 98, -106, 15, 76, 101, 34, 18, 
  -9, 38, 71, 21, 11, 80, -107, 58, 5, -39, 34, 95, 110, 55, -104, -3, -22, -64, 84, 98, 
  -10, -115, -92, 45, 6, -22, 57, -37, 40, 39, 112, 45, 19, -120, 44, 119, 97, 104, -44, -121, 
  -113, 29, 89, 22, 86, -36, 19, -64, 93, 107, -48, -104, -35, 73, -19, 107, 39, 52, 43, -37, 
  103, 112, -65, 68, -14, -67, 32, -91, 13, 25, 99, -99, 46, -48, -103, 100, 102, 119, -45, 76, 
  7, -95, -74, -108, -3, -84, -18, 24, 5, 19, 24, -63, -94, 17, -26, 77, -16, 83, -120, 14, 
  101, 115, 92, 120, -65, 33, 40, -83, -49, 55, 111, -90, -123, -61, 39, 80, -88, -5, -68, -21, 
  -81, 45, -108, 106, -10, -52, 112, -79, 49, 64, 115, 26, 84, 64, 75, 14, 66, -108, 46, 56, 
  66, -103, 3, -25, 77, -53, -105, 114, -114, -72, -72, 108, 84, 102, -50, 27, -51, 54, -69, -4, 
  51, 111, 24, 15, 11, 6, 67, -52, 110, 60, -16, -10, -41, -42, -98, -20, -51, 96, -105, 59, 
  58, -76, -13, 88, -56, 39, 6, 54, -56, 73, 87, -60, 53, -44, -100, -67, -102, 122, -93, -32, 
  73, -26, -118, 101, -117, 26, 56, 91, 89, 37, 18, -95, 24, -71, -12, 17, -92, 74, 75, -119, 
  -3, -49, -14, -95, -122, 113, 85, -38, -107, -33, -71, -97, 58, 106, 72, 0, 79, 40, -97, -46, 
  -3, 28, 112, 77, 88, -54, 106, 0, 25, 62, 117, 70, -101, 18, 14, 118, -114, -100, 70, 4, 
  32, -72, -25, -82, -109, -45, 94, -82, -44, -65, -32, 10, 74, 59, -68, 34, 107, 49, 51, -97, 
  46, -75, 61, -75, -104, -95, 19, -56, -85, -87, -71, 114, -8, -53, -98, -80, 80, -75, 28, -113, 
  -6, -102, -102, 28, -5, 17, 4, 77, 74, 110, -115, 83, 52, 113, 27, 56, 79, -15, -21, 13, 
  -29, -118, -88, 22, 5, -25, -6, 60, 22, -113, -20, -62, 19, -1, -50, -40, 0, 73, -91, -68, 
  34, 46, -52, 91, 90, -49, -7, -79, 13, -6, 8, -45, -94, 9, 105, -38, 54, -56, -71, 119, 
  44, 97, 21, 64, 108, 57, -114, -89, 39, 93, -3, 58, 58, -100, 80, -14, -66, -84, 83, -51, 
  -9, 122, 73, 10, -18, 99, 106, 2, 91, 3, 95, 55, -58, 114, -119, 47, -62, -118, -119, -78, 
  -86, -88, -17, -120, -49, -83, 120, -110, 79, 57, 49, 49, -111, 22, 39, -80, -28, -82, 70, 124, 
  87, 5, 71, -37, 36, 19, 51, -77, -3, 114, 108, 64, 112, 81, -120, -103, 48, 26, 7, -75, 
  19, 109, 44, 74, -114, -2, -55, -46, -10, -5, 32, -41, -63, 120, 118, 68, 50, -50, -7, 110, 
  -17, -90, 120, 56, -79, -110, 44, 49, -61, 113, 42, 52, 72, 47, -117, 70, -34, 75, -64, 119, 
  9, 78, -86, 45, -117, -77, 24, -54, 59, 15, -51, 5, -60, -116, 84, 96, 45, -116, -62, 42, 
  -57, -24, 13, -59, 19, -88, 93, 121, -76, -64, 113, 91, -42, 25, -8, 24, -6, 22, 14, -1, 
};
const TfArray<2, int> tensor_dimension7 = { 2, { 30,20 } };
const TfArray<1, float> quant7_scale = { 1, { 0.0027963628526777029, } };
const TfArray<1, int> quant7_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int8_t tensor_data8[2*30] = { 
  35, -70, 82, -46, -104, -116, -64, -109, -30, 10, -127, -123, 90, -111, 100, -13, 105, 37, -63, -61, -113, 71, 63, -5, -19, -19, 121, 39, 121, -46, 
  -43, 51, -102, 101, 11, 50, -96, -105, -120, 71, -123, 20, 49, -53, 58, -48, 21, -69, -11, -96, -84, -102, 13, 68, -93, -103, -75, -117, -112, -97, 
};
const TfArray<2, int> tensor_dimension8 = { 2, { 2,30 } };
const TfArray<1, float> quant8_scale = { 1, { 0.0034080571494996548, } };
const TfArray<1, int> quant8_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<2, int> tensor_dimension9 = { 2, { 1,10 } };
const TfArray<1, float> quant9_scale = { 1, { 13.755149841308594, } };
const TfArray<1, int> quant9_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<2, int> tensor_dimension10 = { 2, { 1,20 } };
const TfArray<1, float> quant10_scale = { 1, { 7.3027348518371582, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfArray<2, int> tensor_dimension11 = { 2, { 1,30 } };
const TfArray<1, float> quant11_scale = { 1, { 5.3377871513366699, } };
const TfArray<1, int> quant11_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<2, int> tensor_dimension12 = { 2, { 1,2 } };
const TfArray<1, float> quant12_scale = { 1, { 2.4266674518585205, } };
const TfArray<1, int> quant12_zero = { 1, { 127 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<2, int> tensor_dimension13 = { 2, { 1,2 } };
const TfArray<1, float> quant13_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs0 = { 3, { 0,5,1 } };
const TfArray<1, int> outputs0 = { 1, { 9 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 9,6,2 } };
const TfArray<1, int> outputs1 = { 1, { 10 } };
const TfLiteFullyConnectedParams opdata2 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs2 = { 3, { 10,7,3 } };
const TfArray<1, int> outputs2 = { 1, { 11 } };
const TfLiteFullyConnectedParams opdata3 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs3 = { 3, { 11,8,4 } };
const TfArray<1, int> outputs3 = { 1, { 12 } };
const TfLiteSoftmaxParams opdata4 = { 1 };
const TfArray<1, int> inputs4 = { 1, { 12 } };
const TfArray<1, int> outputs4 = { 1, { 13 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 100, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant1))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 80, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 120, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 1000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 60, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 112, (TfLiteIntArray*)&tensor_dimension9, 10, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 32, (TfLiteIntArray*)&tensor_dimension10, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension11, 30, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 32, (TfLiteIntArray*)&tensor_dimension12, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension13, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers.push_back(ptr);
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    return kTfLiteError;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 14;
  for(size_t i = 0; i < 14; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for(size_t i = 0; i < 5; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 5; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  13, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 5; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
